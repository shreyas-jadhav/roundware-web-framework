import { TrackOptions } from "./mixer/TrackOptions";
import { IPlaylistAudiotrack } from "./types/playlistAudioTrack";
import { IAudioContext } from "standardized-audio-context";
import { IAssetData, IMixParams } from "./types";
import { IAudioTrackData } from "./types/audioTrack";
import { IPlaylist } from "./types/playlist";
import { ITrackStates } from "./types/track-states";
export declare class PlaylistAudiotrack implements IPlaylistAudiotrack {
    trackId: any;
    timedAssetPriority: any;
    playlist: any;
    playing: boolean;
    windowScope: Window;
    currentAsset: IAssetData | undefined;
    audioContext: IAudioContext;
    audioElement: HTMLAudioElement;
    gainNode: any;
    trackOptions: TrackOptions;
    mixParams: IMixParams;
    state: ITrackStates | undefined;
    constructor({ audioContext, windowScope, audioData, playlist, }: {
        audioContext: IAudioContext;
        windowScope: Window;
        audioData: IAudioTrackData;
        playlist: IPlaylist;
    });
    setInitialTrackState(): void;
    onAudioError(evt?: any): void;
    onAudioEnded(): void;
    play(): void;
    updateParams(params?: {}): void;
    holdGain(): void;
    setZeroGain(): void;
    fadeIn(fadeInDurationSeconds: number): boolean;
    rampGain(finalVolume: number, durationSeconds: number, rampMethod?: string): boolean;
    fadeOut(fadeOutDurationSeconds: number): boolean;
    loadNextAsset(): any;
    pause(): void;
    playAudio(): void;
    pauseAudio(): void;
    skip(): void;
    replay(): void;
    transition(newState: ITrackStates): void;
    toString(): string;
}
