"use strict";

require("core-js/modules/es.array.concat.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.User = void 0;

require("regenerator-runtime/runtime.js");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/** Responsible for identifying the user to the Roundware server and retrieving an auth token **/
var User = /*#__PURE__*/function () {
  /** Create a User
   * @param {Object} options - Various configuration parameters for this user
   * @param {apiClient} options.apiClient - the API client object to use for server API calls
   * @param {String} options.deviceId - this value distinguishes a particular user, who may be anonymous, to the server; by default we will fingerprint the browser to get this value, but you can supply your own value (useful if your app has a preexisting authorization scheme)
   * @param {String} [options.clientType = "web"]
   **/
  function User(_ref) {
    var apiClient = _ref.apiClient,
        _ref$deviceId = _ref.deviceId,
        deviceId = _ref$deviceId === void 0 ? "00000000000000" : _ref$deviceId,
        _ref$clientType = _ref.clientType,
        clientType = _ref$clientType === void 0 ? "web" : _ref$clientType;

    _classCallCheck(this, User);

    // TODO need to try to persist deviceId as a random value that can partially serve as "a unique identifier generated by the client" that can
    // used to claim a anonymous user's contributions. Some ideas for implementation: https://clientjs.org/ and https://github.com/Valve/fingerprintjs2
    this.apiClient = apiClient;
    this.deviceId = deviceId;
    this.clientType = clientType;
    this.userName = "(unknown)";
  }
  /** @returns {String} human-readable representation of this user **/


  _createClass(User, [{
    key: "toString",
    value: function toString() {
      return "User ".concat(this.userName, " (deviceId ").concat(this.deviceId, ")");
    }
    /** Make an API call to associate the (possibly anonymous) application user with a Roundware user account.
     * Upon success, this function receives an auth token, which is passed onto the apiClient object.
     * @returns {Promise} represents the pending API call **/

  }, {
    key: "connect",
    value: function () {
      var _connect = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var data, responseData;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                data = {
                  device_id: this.deviceId,
                  client_type: this.clientType
                }; // TODO need to also handle auth failures

                _context.prev = 1;
                _context.next = 4;
                return this.apiClient.post("/users/", data);

              case 4:
                responseData = _context.sent;
                this.userName = responseData.username;
                this.apiClient.authToken = responseData.token;
                return _context.abrupt("return", responseData);

              case 10:
                _context.prev = 10;
                _context.t0 = _context["catch"](1);
                console.error("Auth failure", _context.t0);
                return _context.abrupt("return", {});

              case 14:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[1, 10]]);
      }));

      function connect() {
        return _connect.apply(this, arguments);
      }

      return connect;
    }()
  }]);

  return User;
}();

exports.User = User;